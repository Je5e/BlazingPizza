@page "/"
@inject HttpClient HttpClient
@inject NavigationManager NavigationManager 

<div class="main">
    <ul class="pizza-cards">
        @if (Specials != null)
        {
            foreach (var Special in Specials)
            {
                <li @onclick="@(()=>ShowConfigurePizzaDialog(Special))"
                    style="background-image:url('@Special.ImageUrl')">
                    <div class="pizza-info">
                        <span class="title">@Special.Name</span>
                        @Special.Description
                        <span class="price">@Special.GetFormattedBasePrice()</span>
                    </div>

                </li>
            }
        }
    </ul>
</div>

<div class="sidebar">
    @if (Order.Pizzas.Any())
    {
        <div class="order-contents">
            <h2>Tu orden</h2>

            @foreach (var ConfiguredPizza in Order.Pizzas)
            {
                <ConfiguredPizzaItem Pizza="ConfiguredPizza"
                                     OnRemove="@(()=>RemoveConfiguredPizza(ConfiguredPizza))"/>
            }
        </div>
    }
    else
    {
        <div class="empty-cart">Selecciona una pizza<br>para empezar</div>
    }
    <div class="order-total @(Order.Pizzas.Any()? "":"hidden")">
        Total:
        <span class="total-price">@Order.GetFormattedTotalPrice()</span>
        <button class="btn btn-warning"
                disabled="@(Order.Pizzas.Count==0)" @onclick="@PlaceOrder">
            Ordenar >
        </button>
    </div>
</div>
@if (ShowingConfigureDialog)
{
    <ConfigurePizzaDialog Pizza="ConfiguringPizza"
                          OnConfirm="ConfirmConfigurePizzaDialog"
                          OnCancel="CancelConfiguringPizzaDialog">

    </ConfigurePizzaDialog>
}
@code{

    Pizza ConfiguringPizza;
    bool ShowingConfigureDialog;
    List<PizzaSpecial> Specials;

    Order Order = new Order();

    void RemoveConfiguredPizza(Pizza pizza)
    {
        Order.Pizzas.Remove(pizza);
    }

    async Task PlaceOrder()
    {
       var Response = await HttpClient.PostAsJsonAsync("orders", Order);

        var NewOrderId = await Response.Content.ReadFromJsonAsync<int>();
        Order = new Order();

        NavigationManager.NavigateTo($"myorders/{NewOrderId}");
    }
    void ConfirmConfigurePizzaDialog()
    {
        Order.Pizzas.Add(ConfiguringPizza);
        ConfiguringPizza = null;

        ShowingConfigureDialog = false;

        foreach (var pizza in Order.Pizzas) // La orden no se puede ver...
        {
            Console.WriteLine(pizza.Special.Name);
        }
    }

    void ShowConfigurePizzaDialog(PizzaSpecial special)
    {
        ConfiguringPizza = new Pizza()
        {
            Special = special,
            SpecialId = special.Id,
            Size = Pizza.DefaultSize,
            Toppings = new List<PizzaTopping>(),
        };

        ShowingConfigureDialog = true;
    }
    protected async override Task OnInitializedAsync()
    {
        Specials =
            await HttpClient.GetFromJsonAsync<List<PizzaSpecial>>("specials");
    }

    void CancelConfiguringPizzaDialog()
    {
        ConfiguringPizza = null;
        ShowingConfigureDialog = false;
    }
}
