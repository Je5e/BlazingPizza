@page "/"
@inject HttpClient HttpClient
@inject IJSRuntime JSRuntime
@inject NavigationManager NavigationManager 
@using BlazingPizza.Client.Services
@inject OrderState OrderState 

<div class="main">
    <ul class="pizza-cards">
        @if (Specials != null)
        {
            foreach (var Special in Specials)
            {
                <li @onclick="@(()=>OrderState.ShowConfigurePizzaDialog(Special))"
                    style="background-image:url('@Special.ImageUrl')">
                    <div class="pizza-info">
                        <span class="title">@Special.Name</span>
                        @Special.Description
                        <span class="price">@Special.GetFormattedBasePrice()</span>
                    </div>

                </li>
            }
        }
    </ul>
</div>

<div class="sidebar">
    @if (OrderState.Order.Pizzas.Any())
    {
        <div class="order-contents">
            <h2>Tu orden</h2>

            @foreach (var ConfiguredPizza in OrderState.Order.Pizzas)
            {
                <ConfiguredPizzaItem Pizza="ConfiguredPizza"
                                     OnRemove="@(()=>RemovePizza(ConfiguredPizza))"/>
            }
        </div>
    }
    else
    {
        <div class="empty-cart">Selecciona una pizza<br>para empezar</div>
    }
    <div class="order-total @(OrderState.Order.Pizzas.Any()? "":"hidden")">
        Total:
        <span class="total-price">@OrderState.Order.GetFormattedTotalPrice()</span>
        <a href="checkout" class="btn btn-warning @(OrderState.Order.Pizzas.Count== 0? "disabled":"")">
            Ordenar >
        </a>
    </div>
</div>
@if (OrderState.ShowingConfigureDialog)
{
    <ConfigurePizzaDialog Pizza="OrderState.ConfiguringPizza"
                          OnConfirm="OrderState.ConfirmConfigurePizzaDialog"
                          OnCancel="OrderState.CancelConfiguringPizzaDialog">

    </ConfigurePizzaDialog>
}
@code{


    List<PizzaSpecial> Specials;

    protected async override Task OnInitializedAsync()
    {
        Specials =
            await HttpClient.GetFromJsonAsync<List<PizzaSpecial>>("specials");
    }

    async Task RemovePizza(Pizza configuredPizza)
    {
        if (await JSRuntime.Confirm($"¿Eliminar la pizza {configuredPizza.Special.Name} de la orden?"))
        {
            OrderState.RemoveConfiguredPizza(configuredPizza);
        }
    }


}
